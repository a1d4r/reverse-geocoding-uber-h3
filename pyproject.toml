# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "geocoding"
version = "0.1.0"
description = "Reverse geocoding algorithm based on Uber H3"
readme = "README.md"
authors = ["a1d4r <a1d4r@yandex.ru>"]
license = "MIT"
repository = "https://github.com/a1d4r/geocoding"
homepage = "https://github.com/a1d4r/geocoding"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
]

[tool.poetry.dependencies]
python = "^3.9"
Fiona = "^1.8.21"
attrs = "^21.4.0"
jupyter = "^1.0.0"
geojson = "^2.5.0"
h3 = "^3.7.4"
dash = "^2.3.1"
dash-leaflet = "^0.1.23"
scylla-driver = "^3.25.4"
loguru = "^0.6.0"

[tool.poetry.dev-dependencies]
autoflake = "^1.4"
bandit = "^1.7.4"
black = {version = "^22.3.0", allow-prereleases = true}
darglint = "^1.8.1"
isort = {extras = ["colors"], version = "^5.10.1"}
mypy = "^0.950"
mypy-extensions = "^0.4.3"
pre-commit = "^2.18.1"
pydocstyle = "^6.1.1"
pylint = "^2.13.8"
pytest = "^7.1.2"
pyupgrade = "^2.32.0"
safety = "^1.10.3"
coverage = "^6.3.2"
coverage-badge = "^1.1.0"
pytest-html = "^3.1.1"
pytest-cov = "^3.0.0"

[tool.black]
# https://github.com/psf/black
target-version = ["py39"]
line-length = 88
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 39
line_length = 88

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = 3.9
pretty = true
show_traceback = true
color_output = true
#plugins = [
#  "pydantic.mypy"
#]

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

#[tool.pydantic-mypy]
## https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
#init_forbid_extra = true
#init_typed = true
#warn_required_dynamic_aliases = true
#warn_untyped_fields = true

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "geocoding"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true

[tool.pylint.master]
fail-under = 10.0
ignore = ["CVS"]

[tool.pylint.messages_control]
max-line-length = 88
extension-pkg-whitelist = ["pydantic", "cassandra"]
disable = [
  "missing-docstring",
  "unused-argument",
  "no-value-for-parameter",
  "no-member",
  "no-else-return",
  "bad-whitespace",
  "bad-continuation",
  "line-too-long",
  "fixme",
  "protected-access",
  "too-few-public-methods",
  "invalid-name",
  "unspecified-encoding",
  "no-self-argument",  # pydantic validators
  "no-self-use",  # pydantic validators
  "redefined-outer-name",  # pytest fixtures
  "unused-import",  # pylint does not check type annotations
  "consider-using-f-string",
]

[tool.pylint.refactoring]
max-nested-blocks = 3

[tool.pylint.miscellaneous]
notes = ["FIXME", "TODO"]

[tool.pylint.basic]
class-attribute-naming-style = "any"
class-const-naming-style = "any"
good-names=["i", "j", "k", "e", "x", "id", "_", "pk"]

[tool.pylint.format]
max-module-lines = 300

[tool.pylint.similarities]
min-similarity-lines = 10
ignore-docstrings = true
ignore-comments = true
ignore-imports = true

[tool.pylint.design]
max-args = 10
max-attributes = 10
max-statements = 30

[tool.pylint.exceptions]
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.bandit]
skips = ["B101"]